CREATE TABLE FACT_TABLE (
    Date DATE,
    ProductID INT,
    Profit DECIMAL(10, 2),
    Sales DECIMAL(10, 2),
    Margin DECIMAL(10, 2),
    COGS DECIMAL(10, 2),
    Total_Expenses DECIMAL(10, 2),
    Marketing DECIMAL(10, 2),
    Inventory INT,
    Budget_Profit DECIMAL(10, 2),
    Budget_COGS DECIMAL(10, 2),
    Budget_Margin DECIMAL(10, 2),
    Budget_Sales DECIMAL(10, 2),
    Area_Code INT
);

CREATE Table ProductTable (
    Product_Type VARCHAR(255),
    Product VARCHAR(255),
    ProductID INT,
    Type VARCHAR(255)
);

CREATE TABLE LocationTable (
    AreaCode INT,
    State VARCHAR(255),
    Market VARCHAR(255),
    Market_Size VARCHAR(255)
);


1. Display the number of states present in the LocationTable. 

SELECT COUNT(DISTINCT State) AS Number_of_States
FROM LocationTable;


2. How many products are of regular type?

SELECT COUNT(*) AS Regular_Product_Count
FROM ProductTable
WHERE Type = 'Regular';


3. How much spending has been done on marketing of product ID 1?

SELECT Marketing
FROM FACT_TABLE
WHERE ProductID = 1;


4. What is the minimum sales of a product?

SELECT MIN(Sales) AS Minimum_Sales
FROM FACT_TABLE;


5. Display the max Cost of Good Sold (COGS). 

SELECT MAX(COGS) AS Max_COGS
FROM FACT_TABLE;


6. Display the details of the product where product type is coffee. 

SELECT *
FROM ProductTable
WHERE Product_Type = 'Coffee';


7. Display the details where total expenses are greater than 40. 

SELECT *
FROM FACT_TABLE
WHERE Total_Expenses > 40;


8. What is the average sales in area code 719?

SELECT AVG(Sales) AS Average_Sales
FROM FACT_TABLE
WHERE Area_Code = 719;


9. Find out the total profit generated by Colorado state.

SELECT SUM(Profit) AS Total_Profit
FROM FACT_TABLE ft
JOIN LocationTable lt ON ft.Area_Code = lt.AreaCode
WHERE lt.State = 'Colorado';

10. Display the average inventory for each product ID. 

SELECT ProductID, AVG(Inventory) AS Average_Inventory
FROM FACT_TABLE
GROUP BY ProductID;


11. Display state in a sequential order in a Location Table. 

SELECT State
FROM LocationTable
ORDER BY State;



12. Display the average budget of the Product where the average budget margin should be greater than 100. 

SELECT AVG(Budget_Sales) AS Average_Budget
FROM FACT_TABLE
WHERE Budget_Margin > 100;


13. What is the total sales done on date 2010-01-01?

SELECT SUM(Sales) AS Total_Sales
FROM FACT_TABLE
WHERE Date = '2010-01-01';


14. Display the average total expense of each product ID on an individual date. 

SELECT Date, ProductID, AVG(Total_Expenses) AS Average_Total_Expense
FROM FACT_TABLE
GROUP BY Date, ProductID;


15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 

SELECT f.Date, f.ProductID, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, f.Area_Code
FROM FACT_TABLE f
JOIN ProductTable p ON f.ProductID = p.ProductID
JOIN LocationTable l ON f.Area_Code = l.AreaCode;


16. Display the rank without any gap to show the sales wise rank. 

SELECT *, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Sales_Rank
FROM FACT_TABLE;


17. Find the state wise profit and sales. 

SELECT l.State, SUM(f.Profit) AS Total_Profit, SUM(f.Sales) AS Total_Sales
FROM FACT_TABLE f
JOIN LocationTable l ON f.Area_Code = l.AreaCode
GROUP BY l.State;


18. Find the state wise profit and sales along with the productname. 

SELECT l.State, p.Product, SUM(f.Profit) AS Total_Profit, SUM(f.Sales) AS Total_Sales
FROM FACT_TABLE f
JOIN LocationTable l ON f.Area_Code = l.AreaCode
JOIN ProductTable p ON f.ProductID = p.ProductID
GROUP BY l.State, p.Product;


19. If there is an increase in sales of 5%, calculate the increasedsales. 

SELECT Sales * 1.05 AS Increased_Sales
FROM FACT_TABLE;


20. Find the maximum profit along with the product ID and producttype. 

SELECT ProductID, Product_Type, MAX(Profit) AS Maximum_Profit
FROM FACT_TABLE
GROUP BY ProductID, Product_Type;


21. Create a stored procedure to fetch the result according to the product typefrom Product Table. 

CREATE PROCEDURE GetProductsByType
    @ProductType VARCHAR(255)
AS
BEGIN
    SELECT *
    FROM ProductTable
    WHERE Product_Type = @ProductType;
END;


22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss. 

SELECT *,
    CASE
        WHEN Total_Expenses < 60 THEN 'Profit'
        ELSE 'Loss'
    END AS Profit_Loss
FROM FACT_TABLE;


23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order. 

SELECT Date, ProductID, SUM(Sales) AS Weekly_Sales
FROM FACT_TABLE
GROUP BY Date, ProductID WITH ROLLUP;


24. Apply union and intersection operator on the tables which consist of attribute area code. 

-- Union
(SELECT AreaCode FROM FACT_TABLE)
UNION
(SELECT AreaCode FROM LocationTable);

-- Intersection
(SELECT AreaCode FROM FACT_TABLE)
INTERSECT
(SELECT AreaCode FROM LocationTable);


25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference. 

CREATE FUNCTION GetProductType
(
    @ProductID INT
)
RETURNS VARCHAR(255)
AS
BEGIN
    DECLARE @ProductType VARCHAR(255);
    SELECT @ProductType = Product_Type
    FROM ProductTable
    WHERE ProductID = @ProductID;
    RETURN @ProductType;
END;


26. Change the product type from coffee to tea where product IDis 1 andundoit. 

-- Changing product type from coffee to tea
UPDATE ProductTable
SET Product_Type = 'Tea'
WHERE ProductID = 1;

-- Undoing the change
ROLLBACK;


27. Display the date, product ID and sales where total expenses are between 100 to 200. 

SELECT Date, ProductID, Sales
FROM FACT_TABLE
WHERE Total_Expenses BETWEEN 100 AND 200;


28. Delete the records in the Product Table for regular type. 

DELETE FROM ProductTable
WHERE Type = 'Regular';


29. Display the ASCII value of the fifth character from the columnProduct.

SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ASCII_Value
FROM ProductTable;
